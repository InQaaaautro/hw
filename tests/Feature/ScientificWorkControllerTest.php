<?php

namespace Tests\Feature;

use App\Models\Role;
use App\Models\ScientificWork;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class ScientificWorkControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        #User::factory()->create();
        $this->artisan('db:seed');

    }

    public static function getTestData(): array
    {
        return [
            'summary' => 'fasdkfja;lsdkfjlasdf',
            'published_at' => Carbon::today()
        ];
    }

    public static function getTestDataForUpdate(): array
    {
        return [
            'summary' => 'fasdkfja;lsdkfjlasdf',
            'published_at' => Carbon::yesterday()
        ];
    }

    public function testScientificWorkControllerIndex(): void
    {
        $user = User::first();
        $response = $this
            ->actingAs($user, 'web')
            ->get(route('scientific_works.index'));
        $response->assertStatus(200);

        $user1 = User::latest()->first();
        $user1->roles()->detach();
        $this->assertDatabaseCount('users', 2);
        $resoponse_ = $this
            ->actingAs($user1)
            ->get(route('scientific_works.index'));
        $resoponse_->assertStatus(404);

    }

    public function testScientificWorkControllerCreate(): void
    {
        $user = User::first();
        $response = $this
            ->actingAs($user, 'web')
            ->get(route('scientific_works.create'));
        $response->assertStatus(200);

    }

    public function testScientificWorkControllerEdit(): void
    {
        $user = User::first();
        $SW = $user->scientific_works()->first();
        //$SW = ScientificWork::first();
        $response = $this
            ->actingAs($user, 'web')
            ->get(route('scientific_works.edit', $SW['id']));
        $response->assertStatus(200);

    }


    public function testScientificWorkController(): void
    {
        $dataForTest = $this->getTestData();

        $this->assertDatabaseMissing('scientific_works', $dataForTest);

        $user = User::first();
        $resp = $this
            ->actingAs($user, 'web')
            ->post(route('scientific_works.store'), $dataForTest);

        $resp->assertStatus(302)->assertRedirect(route('scientific_works.index'));

        $this->assertDatabaseHas('scientific_works', $dataForTest);

        ###---try update
        $ScientificWorkID = ScientificWork::first()->id;
        $dataForTestUpdate = $this->getTestDataForUpdate();
        $respUpdate = $this
            ->actingAs($user, 'web')
            ->put(route('scientific_works.update', ['scientific_work' => $ScientificWorkID]), $dataForTestUpdate);
        $respUpdate->assertStatus(302)->assertRedirect(route('scientific_works.index'));

        $this->assertDatabaseHas('scientific_works', $dataForTestUpdate);
    }

    /* public function testUpdateScientificWork(): void
     {
         $dataForTest = $this->getTestData();

         $this->assertDatabaseHas('scientific_works', $dataForTest);
     }*/
}
